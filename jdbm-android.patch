Index: src/main/java/jdbm/helper/WeakCache.java
===================================================================
--- src/main/java/jdbm/helper/WeakCache.java	(revision 35)
+++ src/main/java/jdbm/helper/WeakCache.java	(working copy)
@@ -197,7 +197,7 @@
      *         would have experienced while evicting an object it currently
      *         cached.
      */
-    public void put(K key, V value, boolean dirty, Serializer ser) throws CacheEvictionException {
+    public void put(K key, V value, boolean dirty, Serializer<V> ser) throws CacheEvictionException {
         if (key == null) {
             throw new IllegalArgumentException("key cannot be null.");
         } else if (value == null) {
Index: src/main/java/jdbm/recman/FreeLogicalRowIdPage.java
===================================================================
--- src/main/java/jdbm/recman/FreeLogicalRowIdPage.java	(revision 35)
+++ src/main/java/jdbm/recman/FreeLogicalRowIdPage.java	(working copy)
@@ -63,14 +63,15 @@
     private int previousFoundFree = 0; // keeps track of the most recent found free slot so we can locate it again quickly 
     private int previousFoundAllocated = 0; // keeps track of the most recent found allocated slot so we can locate it again quickly
     
-    // slots we returned.
-    final PhysicalRowId[] slots = new PhysicalRowId[ELEMS_PER_PAGE];
+    // just use a singleton because all callers just throw it away almost immediately within a thread synchronized context
+    final private PhysicalRowId singletonRowId;
 
     /**
      *  Constructs a data page view from the indicated block.
      */
     FreeLogicalRowIdPage(BlockIo block) {
         super(block);
+        singletonRowId = new PhysicalRowId(block, (short) 0);
     }
 
     /**
@@ -109,18 +110,19 @@
     /** Allocates a slot */
     PhysicalRowId alloc(int slot) {
         setCount((short) (getCount() + 1));
-        get(slot).setBlock(-1);
+        PhysicalRowId rowId = get(slot);
+        rowId.setBlock(-1);
         
         // update previousFoundAllocated if the newly allocated slot is before what we've found in the past
         if (slot < previousFoundAllocated)
             previousFoundAllocated = slot;
         
-        return get(slot);
+        return rowId;
     }
 
     /** Returns true if a slot is allocated */
     boolean isAllocated(int slot) {
-        return get(slot).getBlock() > 0;
+        return get(slot).isAllocated();
     }
 
     /** Returns true if a slot is free */
@@ -129,13 +131,18 @@
     }
 
 
-    /** Returns the value of the indicated slot */
     PhysicalRowId get(int slot) {
-        if (slots[slot] == null)
-            slots[slot] = new PhysicalRowId(block, slotToOffset(slot));;
-        return slots[slot];
+        singletonRowId.pos = slotToOffset(slot);
+        return singletonRowId;
     }
+    
+//    PhysicalRowId get(int slot) {
+//        if (slots[slot] == null)
+//            slots[slot] = new PhysicalRowId(block, slotToOffset(slot));;
+//        return slots[slot];
+//    }
 
+
     /** Converts slot to offset */
     private short slotToOffset(int slot) {
         return (short) (O_FREE +
Index: src/main/java/jdbm/recman/RecordFile.java
===================================================================
--- src/main/java/jdbm/recman/RecordFile.java	(revision 35)
+++ src/main/java/jdbm/recman/RecordFile.java	(working copy)
@@ -751,7 +751,7 @@
      *  Synchronizes the file.
      */
     void sync() throws IOException {
-        file.getFD().sync();
+//        file.getFD().sync();
     }
 
 
Index: src/main/java/jdbm/recman/FreePhysicalRowIdPage.java
===================================================================
--- src/main/java/jdbm/recman/FreePhysicalRowIdPage.java	(revision 35)
+++ src/main/java/jdbm/recman/FreePhysicalRowIdPage.java	(working copy)
@@ -76,14 +76,15 @@
 	 */
     static public final transient int wasteMargin2 = PageHeader.SIZE/4;
 
-    // slots we returned.
-    FreePhysicalRowId[] slots = new FreePhysicalRowId[ELEMS_PER_PAGE];
+    // just use a singleton because all callers just throw it away almost immediately within a thread synchronized context
+    final FreePhysicalRowId singletonRowId;
 
     /**
      *  Constructs a data page view from the indicated block.
      */
     FreePhysicalRowIdPage(BlockIo block) {
   super(block);
+      singletonRowId = new FreePhysicalRowId(block, (short)0);
     }
 
     /**
@@ -130,13 +131,10 @@
   return !isAllocated(slot);
     }
     
-    
     /** Returns the value of the indicated slot */
     FreePhysicalRowId get(int slot) {
-        if (slots[slot] == null) {
-            slots[slot] = new FreePhysicalRowId(block, slotToOffset(slot));
-        }
-        return slots[slot];
+        singletonRowId.pos = slotToOffset(slot);
+        return singletonRowId;
     }
 
     /** Converts slot to offset */
Index: src/main/java/jdbm/recman/TransactionManager.java
===================================================================
--- src/main/java/jdbm/recman/TransactionManager.java	(revision 35)
+++ src/main/java/jdbm/recman/TransactionManager.java	(working copy)
@@ -324,7 +324,8 @@
     private void sync() throws IOException {
         oos.flush();
         fos.flush();
-        fos.getFD().sync();
+// for reasons unknown sync() fails intermittently on android, so don't do it
+//        fos.getFD().sync();
     }
 
     /**
Index: src/main/java/jdbm/recman/PhysicalRowId.java
===================================================================
--- src/main/java/jdbm/recman/PhysicalRowId.java	(revision 35)
+++ src/main/java/jdbm/recman/PhysicalRowId.java	(working copy)
@@ -93,6 +93,11 @@
         block.writeShort(pos + O_OFFSET, value);
     }
     
+    /** Returns true if the block number is non-zero */
+    boolean isAllocated() {
+        return !block.isLongZero(pos + O_BLOCK);
+    }
+
     /**
      * Return a string representation of the physical block and offset and the
      * logical block an offset that are being translated to that physical block
Index: src/main/java/jdbm/recman/BlockIo.java
===================================================================
--- src/main/java/jdbm/recman/BlockIo.java	(revision 35)
+++ src/main/java/jdbm/recman/BlockIo.java	(working copy)
@@ -279,6 +279,21 @@
         setDirty();
     }
 
+    /**
+     *  Check's to see if a long is 0
+     */
+    public boolean isLongZero( int pos )
+    {
+        return (data[pos+7] == 0) &&
+        (data[pos+6] == 0) &&
+        (data[pos+5] == 0) &&
+        (data[pos+4] == 0) &&
+        (data[pos+3] == 0) &&
+        (data[pos+2] == 0) &&
+        (data[pos+1] == 0) &&
+        (data[pos] == 0);
+    }
+
     // overrides java.lang.Object
 
     public String toString() {
